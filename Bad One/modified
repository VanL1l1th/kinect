
class BadCell {
  float x;
  float y;
  float alpha;
  float Midpoint;
  float R;

  BadCell(float MidpointC, float RC) {

    Midpoint = MidpointC;
    R = RC;
    
  }
  
  void setlocation(){
    
    alpha = random(0,2*PI);
    x = Midpoint + R * cos(alpha);
    y = Midpoint + R * sin(alpha);
   
  }
    void displayBC(){
        fill(0);
        ellipse(x,y, 1, 1);
        setlocation();
    }
}
BadOrgan badorgan;
BadCell badcell;
PVector pos;
void setup() {
  background(255);
  size(500, 500);
 pos=new PVector(mouseX,mouseY);
 badorgan = new BadOrgan(pos,10);
badcell = new BadCell(width/2,10);
  }


void draw(){
  badcell.displayBC();
 badorgan.displayBO();
  
}
class BadOrgan{
  float Mid;
 PVector posBO=new PVector(width/2,height/2);
 float CellN;
 float Rayon;
 ArrayList<BadCell> badcell;
 
  BadOrgan(PVector posBO_ ,float CN){
     posBO = posBO_;
    CellN = CN;
    badcell = new ArrayList <BadCell>();
  }
  
  void addCell(){
    
    for(float i = CellN; i>0;i--){
      badcell.add(new BadCell(Rayon,Mid));
      CellN ++;
      Rayon++;
    }
  }
    
    void displayBO(){
      
    for (int i=0; i<badcell.size(); i++){
      for(BadCell c: badcell)
      c.displayBC();
      
      for (int j=0; j<badcell.size(); i++){
         float d;
         float xi = badcell.get(i).x;
         float yi = badcell.get(i).y;
         float xj = badcell.get(j).x;
         float yj = badcell.get(j).y;
         PVector vi = new PVector(xi,yi);
         PVector vj = new PVector(xj,yj);
          d = PVector.dist(vi,vj);
          if (d <20) {
            stroke(0,50);
            strokeWeight(0.5);
            line(badcell.get(i).x,badcell.get(i).y,badcell.get(j).x,badcell.get(j).y);
          }
      }
    }
  }
}
