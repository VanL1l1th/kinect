class BadCell {

  PVector location = new PVector(width/2, height/2);
  PVector velocity ;
  float dia;
  boolean isseed;
  float colors;
  float lineweight;
 


  BadCell( float dia_, float colors_, float lineweight_) {

    //location_ = location;
    //velocity_ = velocity;
    dia_= dia;
    colors_ = colors;
    lineweight_= lineweight;
    isseed = false;
  }
  void display() {
    if (isseed == true) {
      fill(255, 0, 0);
    }
    if (isseed == false) {
      fill(255, 255, 0);
    }
    ellipse(location.x, location.y, 3, 3);
  }

  void update() {
    if(isseed == false){
    velocity = new PVector(random(-100,100),random(-100,100));
    location.add(velocity);
    }
    //if (isseed == true) {
    //  velocity = new PVector(random(-30, 30), random(-30, 30));
    //  location.add(velocity);
    //}
  }
}
class BadOrgan{
  PVector posBO=new PVector(width,height);
  // a la place d'une liste faire une arraylist
  BadCell[] myCells = new BadCell[1500];
  
  BadOrgan(PVector p){
   posBO=p; 
    for (int i = 0; i < myCells.length; i ++) {
    myCells[i] = new BadCell(5,0,0.5);
  }
  }
  void display(){
     myCells[0].isseed = true;
  for (int i=0; i<myCells.length; i++) {
    //myCells[i].display();
    myCells[i].update();
    if (myCells[i].isseed == false) {
      for (int j=0; j<myCells.length;j++) {
        if (myCells[j].isseed == true) {
          float d;
          d = PVector.dist(myCells[i].location, myCells[j].location);
          if (d <20) {
            myCells[i].isseed = true;
            stroke(0,50);
            strokeWeight(0.5);
            line(myCells[i].location.x, myCells[i].location.y, myCells[j].location.x, myCells[j].location.y);
           
          }
        }
      }
    }
  }
  }
  
  
}
BadOrgan badorgan;
PVector pos1;

void setup() {
  background(255);
  size(500, 500);
  pos1=new PVector(mouseX,mouseY);
 badorgan = new BadOrgan(pos1);
  }

void draw(){
 badorgan.display();
  
}
